{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","osas","className","alt","src","monster","id","name","email","CardList","props","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchFeild","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAAAC,GAAI,OACpB,sBAAKC,UAAU,sCAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA4BH,EAAKI,QAAQC,GAAzC,4BACvB,6BAAKL,EAAKI,QAAQE,OAC1B,4BAAIN,EAAKI,QAAQG,aCHJC,EAAW,SAACC,GACzB,OAAQ,qBAAKR,UAAU,YAAf,SACPQ,EAAMC,SAASC,KAAI,SAAAP,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCJNO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAO,SACVd,UAAY,SACZY,YAAeA,EACfG,SAAYF,MCsCLG,E,kDAvCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,gEASI,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,+BAG7B,IAAD,SAC2BE,KAAKR,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAlB,GAAQ,OAC/CA,EAASJ,KAAKuB,cAAcC,SAASX,EAAYU,kBAGnD,OACF,sBAAK5B,UAAU,MAAf,UACA,kDACE,cAAC,EAAD,CACEY,YAAc,kBACdC,aACE,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAG/C,cAAC,EAAD,CAAUvB,SAAUiB,W,GA/BNO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ecdb56ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = osas => (\r\n    <div className='card-container card-container:hover'>\r\n        <img alt='monsters' src = {`https://robohash.org/${osas.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{osas.monster.name}</h2>\r\n<p>{osas.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\nreturn (<div className=\"card-list\">{\r\n props.monsters.map(monster => (\r\n<Card key={monster.id} monster = {monster} />\r\n ))\r\n} \r\n</div>)}","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input type = \"search\" \r\n        className = \"search\"\r\n        placeholder = {placeholder}\r\n        onChange = {handleChange}\r\n    />\r\n);\r\n\r\n","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchFeild: ''\n    };\n  }\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monsters:users}));\n}\n\n  render() {\n    const { monsters, searchFeild } = this.state;\n    const filteredMonsters = monsters.filter(monsters => \n      monsters.name.toLowerCase().includes(searchFeild.toLowerCase())\n    );\n\n    return (\n  <div className=\"App\">\n  <h1>Monsters Rolodex</h1>\n    <SearchBox \n      placeholder = \"Search monsters\"\n      handleChange = {\n        e => this.setState({ searchFeild: e.target.value}) \n      }\n    />\n    <CardList monsters={filteredMonsters} />\n     \n  </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}